// GBuffer rendering pixel shader
// this takes data from a mesh and materials and push results into GBuffer
// GBuffers are : 
// - Normals	(float4)
// - Colors		(float4)
// - Specular	(float4)
// - Depth		(int64)
// markups are procedurally generated by the materials (some materials need some computations


struct VS_OUTPUT
{
	float4 position :		SV_POSITION;
	float3 normal :			NORMAL;
	float depth :			DEPTH_VIEW_SPACE;
};

struct PS_OUTPUT
{
	float4 normal :			SV_Target0;
	float4 color :			SV_Target1;
	float4 specular :		SV_Target2;
	//float depth :			SV_Target4;	// To do : use a render target to fill depth buffer
};

PS_OUTPUT main(const VS_OUTPUT input)
{
	PS_OUTPUT output;

	/////////////////////////////////////////////
	// update the normal buffer
	float4 normal;	// value to return
	$NORMAL$
	output.normal = normal;



	/////////////////////////////////////////////
	// update the color buffer
	float4 color;
	$COLOR$
	output.color = color;



	/////////////////////////////////////////////
	// update the specular buffer
	float4 specular;
	%SPECULAR%
	output.specular = specular;



	/////////////////////////////////////////////
	// update the depth buffer
	// To do ...

	return output;
}